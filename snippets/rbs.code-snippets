{
  "New module": {
    "scope": "rbs",
    "prefix": "module",
    "description": "Define a module.",
    "body": [
      "module ${1:ModuleName}",
      "\t$0",
      "end"
    ],
  },

  "New module with constraints": {
    "scope": "rbs",
    "prefix": "module with constraint",
    "description": "Define a module with a constraint.",
    "body": [
      "module ${1:ModuleName} : ${2:_Constraint}",
      "\t$0",
      "end"
    ],
  },

  "New class": {
    "scope": "rbs",
    "prefix": "class",
    "description": "Define a class.",
    "body": [
      "class ${1:ClassName}",
      "\t$0",
      "end"
    ],
  },

  "New class with superclass": {
    "scope": "rbs",
    "prefix": ["class with super", "subclass"],
    "description": "Define a subclass.",
    "body": [
      "class ${1:ClassName} < ${2:Superclass}",
      "\t$0",
      "end"
    ],
  },

  "New interface": {
    "scope": "rbs",
    "prefix": ["interface"],
    "description": "Define an interface.",
    "body": [
      "interface _${1:InterfaceName}",
      "\t$0",
      "end"
    ],
  },

  "attr_reader": {
    "scope": "rbs",
    "prefix": ["attr_reader", "getter"],
    "description": "Define a getter method.",
    "body": [
      "attr_reader ${1:name}: ${2:Type}$0",
    ],
  },

  "attr_writer": {
    "scope": "rbs",
    "prefix": ["attr_writer", "setter"],
    "description": "Define a setter method.",
    "body": [
      "attr_writer ${1:name}: ${2:Type}$0",
    ],
  },

  "attr_accessor": {
    "scope": "rbs",
    "prefix": ["attr_accessor", "setter and getter"],
    "description": "Define a setter and getter method.",
    "body": [
      "attr_accessor ${1:name}: ${2:Type}$0",
    ],
  },

  "New instance variable": {
    "scope": "rbs",
    "prefix": ["ivar", "instance variable"],
    "description": "Define an instance variable.",
    "body": [
      "@${1:name}: ${2:Type}$0",
    ],
  },

  "New constant": {
    "scope": "rbs",
    "prefix": ["constant"],
    "description": "Define a constant.",
    "body": [
      "${1:CONSTANT_NAME}: ${2:Type}$0",
    ],
  },

  "Singleton type": {
    "scope": "rbs",
    "prefix": ["singleton type"],
    "description": "Create a singleton type.\nClass singleton type denotes the type of a singleton object of a class.",
    "body": [
      "singleton(${TM_SELECTED_TEXT:${1:Type}})",
    ],
  },

  "Record type": {
    "scope": "rbs",
    "prefix": ["record type", "hash literal"],
    "description": "Create a record type.\nRecords are Hash objects, fixed set of keys, and heterogeneous.",
    "body": [
      "{ ${1:key}: ${2:Type}$0 }",
    ],
  },

  "Tuple type": {
    "scope": "rbs",
    "prefix": ["tuple type", "array literal"],
    "description": "Create a tuple type.\nTuples are Array objects, fixed size and heterogeneous.",
    "body": [
      "[${1:FirstElementType}, ${2:SecondElementType}$0]",
    ],
  },

  "Union type": {
    "scope": "rbs",
    "prefix": ["union type"],
    "description": "Create a union type.\nUnion type denotes a type of one of the given types.",
    "body": [
      "${1:FirstType} | ${2:SecondType}$0",
    ],
  },

  "Intersection type": {
    "scope": "rbs",
    "prefix": ["intersection type"],
    "description": "Create an intersection type.\nIntersection type denotes a type of all of the given types.",
    "body": [
      "${1:FirstType} & ${2:SecondType}$0",
    ],
  },

  "Array type": {
    "scope": "rbs",
    "prefix": ["Array"],
    "description": "Create an Array type.",
    "body": [
      "Array[${TM_SELECTED_TEXT:${1:ElementType}}]",
    ],
  },

  "Hash type": {
    "scope": "rbs",
    "prefix": ["Hash"],
    "description": "Create a Hash type.",
    "body": [
      "Hash[${1:KeyType}, ${2:ValueType}]",
    ],
  },

  "Proc type": {
    "scope": "rbs",
    "prefix": ["proc type", "lambda", "anonymous function"],
    "description": "Create a Proc type.",
    "body": [
      "^(${1:ArgType}) -> ${2:ReturnType}",
    ],
  },

  "Private section": {
    "scope": "rbs",
    "prefix": ["private"],
    "description": "Set methods below as private.",
    "body": [
      "private",
      "",
      "$0"
    ],
  },

  "Public section": {
    "scope": "rbs",
    "prefix": ["public"],
    "description": "Set methods below as public.",
    "body": [
      "public",
      "",
      "$0"
    ],
  },

  "New instance method": {
    "scope": "rbs",
    "prefix": ["def"],
    "description": "Define an instance method.",
    "body": [
      "def ${1:name}: (${2:ArgType}) -> ${3:ReturnType}$0",
    ],
  },

  "New instance method with block": {
    "scope": "rbs",
    "prefix": ["def block"],
    "description": "Define an instance method with a block.",
    "body": [
      "def ${1:name}: (${2:ArgType}) ${3:?}{ (${4:BlockArgType}) -> ${5:BlockReturnType} } -> ${6:ReturnType}$0",
    ],
  },

  "New singleton method": {
    "scope": "rbs",
    "prefix": ["def self"],
    "description": "Define a singleton method",
    "body": [
      "def self.${1:name}: (${2:ArgType}) -> ${3:ReturnType}$0",
    ],
  },

  "New singleton method with block": {
    "scope": "rbs",
    "prefix": ["def self block"],
    "description": "Define a singleton method with a block.",
    "body": [
      "def self.${1:name}: (${2:ArgType}) ${3:?}{ (${4:BlockArgType}) -> ${5:BlockReturnType} } -> ${6:ReturnType}$0",
    ],
  },

  "New module function": {
    "scope": "rbs",
    "prefix": ["def self?"],
    "description": "Define a module function.",
    "body": [
      "def self?.${1:name}: (${2:ArgType}) -> ${3:ReturnType}$0",
    ],
  },

  "New module function with block": {
    "scope": "rbs",
    "prefix": ["def self? block"],
    "description": "Define a module function with a block.",
    "body": [
      "def self?.${1:name}: (${2:ArgType}) ${3:?}{ (${4:BlockArgType}) -> ${5:BlockReturnType} } -> ${6:ReturnType}$0",
    ],
  },

  "Include": {
    "scope": "rbs",
    "prefix": ["include"],
    "description": "Include a module or interface.",
    "body": [
      "include ${1:ModuleName}$0",
    ],
  },

  "Extend": {
    "scope": "rbs",
    "prefix": ["extend"],
    "description": "Extend a module or interface.",
    "body": [
      "extend ${1:ModuleName}$0",
    ],
  },

  "Prepend": {
    "scope": "rbs",
    "prefix": ["prepend"],
    "description": "Prepend a module or interface.",
    "body": [
      "prepend ${1:ModuleName}$0",
    ],
  },

  "New method alias": {
    "scope": "rbs",
    "prefix": ["alias"],
    "description": "Define a method alias.",
    "body": [
      "alias ${1:new_name} ${2:original_name}$0",
    ],
  },
}